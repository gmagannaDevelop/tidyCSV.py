name: tests

on:
  repository_dispatch:
    types: [successful-build-1]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# jobs can run sequentially or in parallel
jobs:
  # DATA CHECKS
  # this space is reserved to build a more complex structure
  # if I ever find the time to figure out how to recycle an
  # artifact from previous runs of the same workflow.
  # END DATA CHECKS

  # CACHING AND ARTIFACT GENERATION
  goodls:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.sha }}
      - uses: Gr1N/setup-poetry@v7
      - uses: actions/setup-go@v2

      - name: cache
        id: cache
        uses: actions/cache@v2
        env:
          cache-name: goodls-cache
        with:
          path: /home/runner/go/bin
          key: ${{ runner.os }}-tests-${{ env.cache-name }}

      - name: goodls_install
        if: ${{ !steps.cache.outputs.cache-hit }}
        env:
          GOODLS_APIKEY: ${{ secrets.GDRIVE_API_KEY }}
          REPO_URL: ${{ secrets.GDRIVE_REPO_URL }}
        run: |
          go get -u github.com/tanaikech/goodls

  data_download:
    runs-on: ubuntu-latest
    needs: goodls
    if: success()
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.sha }}
      - uses: Gr1N/setup-poetry@v7
      - uses: actions/setup-go@v2

      - name: goodls_cache
        uses: actions/cache@v2
        env:
          cache-name: goodls-cache
        with:
          path: /home/runner/go/bin
          key: ${{ runner.os }}-tests-${{ env.cache-name }}

      - name: download_data
        id: download
        env:
          GOODLS_APIKEY: ${{ secrets.GDRIVE_API_KEY }}
          REPO_URL: ${{ secrets.GDRIVE_REPO_URL }}
          GOODLS_BIN: /home/runner/go/bin/goodls
        run: |
          echo $REPO_URL | $GOODLS_BIN
          mv raw data

      - name: save_artifact
        uses: actions/upload-artifact@v2
        with:
          name: data
          path: data
  # END CACHING AND ARTIFACT GENERATION

  tests:
    runs-on: ubuntu-latest
    needs: data_download
    if: success()
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.sha }}
      - uses: Gr1N/setup-poetry@v7

      - name: Cache poetry env
        uses: actions/cache@v2
        env:
          cache-name: poetry-env-cache
        with:
          path: /home/runner/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-build-${{ env.cache-name }}-pyproj-${{ hashFiles('pyproject.toml')}}-lock-${{ hashFiles('poetry.lock')}}

      - name: download_artifact
        uses: actions/download-artifact@v2
        with:
          name: data
          path: data

      - name: tests
        run: |
          ls
          poetry run pytest
